# ROS/IOP Bridge
# Copyright (c) 2017 Fraunhofer
#
# This program is dual licensed; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# version 2 as published by the Free Software Foundation, or
# enter into a proprietary license agreement with the copyright
# holder.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; or you can read the full license at
# <http://www.gnu.de/documents/gpl-2.0.html>
#
# :author: Timo RÃ¶hling
# :author: Alexander Tiderko

include(CMakeParseArguments)

get_filename_component(IOP_BUILDER_SCRIPT_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
if(NOT EXISTS "${IOP_BUILDER_SCRIPT_DIR}/mss.py")
  set(IOP_BUILDER_SCRIPT_DIR "@CMAKE_CURRENT_SOURCE_DIR@/cmake")
endif()

macro(_iop_capitalize_string invalue outvar)
  string(TOUPPER "${invalue}" _iop_upper_tmp)
  string(SUBSTRING "${_iop_upper_tmp}" 0 1 _iop_first)
  string(SUBSTRING "${invalue}" 1 -1 _iop_last)
  set("${outvar}" "${_iop_first}${_iop_last}")
endmacro()

macro(iop_init_paths)
  if ("${PROJECT_NAME}" STREQUAL "")
    message(FATAL_ERROR "You must call project() first")
  endif()
  message(STATUS "JTS path is ${jaustoolset_WORKING_DIR}")
endmacro()

macro(iop_init)
  iop_init_paths()
  # component ID is defined by configuration! set to 0
  # cmake_parse_arguments(iop_arg "" "COMPONENT_ID" "" ${ARGN})
  # if ("${iop_arg_COMPONENT_ID}" STREQUAL "")
  #   message(FATAL_ERROR "Missing required argument COMPONENT_ID")
  # endif()
  # set(IOP_COMPONENT_ID "${iop_arg_COMPONENT_ID}")
  set(IOP_COMPONENT_ID "0")
  _iop_capitalize_string("${PROJECT_NAME}" IOP_COMPONENT_NAME)
  message(STATUS "JAUS component name is ${IOP_COMPONENT_NAME}_${IOP_COMPONENT_ID}")
  set(IOP_COMPONENT_DIR "${CMAKE_CURRENT_BINARY_DIR}/jaus/${IOP_COMPONENT_NAME}_${IOP_COMPONENT_ID}")
  message(STATUS "IOP_COMPONENT_DIR ${IOP_COMPONENT_DIR}")
  file(MAKE_DIRECTORY "${IOP_COMPONENT_DIR}/include")
  # we need the devel include path to avoid set the CPATH environment variable
  set(DEVEL_SPACE ${CATKIN_DEVEL_PREFIX})
  message(STATUS "CATKIN_DEVEL_PREFIX: ${CATKIN_DEVEL_PREFIX}")
  if ("${DEVEL_SPACE}/lib/iop_codegenerator.jar" MATCHES "/.private/*")
    # if run with "catkin build" it build in .private location -> move up
    get_filename_component(DEVEL_SPACE "${DEVEL_SPACE}" PATH)
    get_filename_component(DEVEL_SPACE "${DEVEL_SPACE}" PATH)
    message(STATUS "DEVEL_SPACE (removed private space): ${DEVEL_SPACE}")
  endif()
  set(DEVEL_INCLUDE "${DEVEL_SPACE}/include")
  message(STATUS "DEVEL_INCLUDE: ${DEVEL_INCLUDE}")
  set(DEVEL_LIB "${DEVEL_SPACE}/lib")
  message(STATUS "DEVEL_LIB: ${DEVEL_LIB}")
  set(catkin_INCLUDE_DIRS "${DEVEL_INCLUDE};${IOP_COMPONENT_DIR};${IOP_COMPONENT_DIR}/include;${catkin_INCLUDE_DIRS}")
  message(STATUS "catkin_INCLUDE_DIRS: ${catkin_INCLUDE_DIRS}")
  set(IOP_INIT_OK 1)
  find_program(IOP_DIFF diff)
  find_package(Java)
  if (NOT ${Java_FOUND})
    message(FATAL_ERROR "java not found")
  endif()
  message(STATUS "use ${Java_JAVAC_EXECUTABLE} compiler version: ${Java_VERSION_MAJOR}")

  if (${Java_VERSION_MAJOR} MATCHES "^(9|10)$")
    set(CMAKE_JAVA_COMPILE_FLAGS --add-modules java.xml.bind)
  endif()
  if (${Java_VERSION_MAJOR} MATCHES "^(9|10)$")
    # the module JAXB marked as deprecated since java 9
    set(CMAKE_JAVA_COMPILE_FLAGS --add-modules java.xml.bind)
    set(jaustoolset_INCLUDE_JARS ${jaustoolset_INCLUDE_JARS_LT11})
  elseif (${Java_VERSION_MAJOR} MATCHES "^(6|7|8)$")
    set(jaustoolset_INCLUDE_JARS ${jaustoolset_INCLUDE_JARS_LT11})
  else ()
    # the module JAXB removed from JDK since java 11
    # use own libraries
    set(jaustoolset_INCLUDE_JARS ${jaustoolset_INCLUDE_JARS_S11})
  endif()
endmacro()

macro(iop_export_service)
  foreach(service ${ARGN})
      file(MAKE_DIRECTORY "${IOP_COMPONENT_DIR}/include/${service}")
      list(APPEND "IOP_INSTALL_INCLUDE_DIRS" "${IOP_COMPONENT_DIR}/include/${service}")
  endforeach()
  message(STATUS "export IOP_INSTALL_INCLUDE_DIRS: ${IOP_INSTALL_INCLUDE_DIRS}")
endmacro()

macro(_iop_filter_list outvar ext)
  set("${outvar}")
  foreach(item ${ARGN})
    STRING(REGEX MATCH ".*\\.${ext}" item ${item})
    IF(item)
      list(APPEND "${outvar}" "${item}")
    ENDIF(item)
  endforeach()
endmacro()

macro(_iop_prepend_path outvar ppath)
  set("${outvar}")
  foreach(item ${ARGN})
    list(APPEND "${outvar}" "${ppath}/${item}")
  endforeach()
endmacro()

macro(iop_code_generator)
  if(NOT "${IOP_INIT_OK}" EQUAL 1)
    message(FATAL_ERROR "You must call iop_init() first")
  endif()
  list(APPEND "IOP_INCLUDE_DIRS" "${CATKIN_DEVEL_PREFIX}/${CATKIN_GLOBAL_INCLUDE_DESTINATION}")
  message(STATUS "new IOP_INCLUDE_DIRS ${IOP_INCLUDE_DIRS}")
  cmake_parse_arguments(iop_arg "" "GENERATED_SOURCES;COMPONENT_ID" "IDLS;OWN_IDLS;OVERRIDES;EXTERN_SERVICES" ${ARGN})
  _iop_filter_list(iop_arg_OVERRIDE_SOURCES "cpp" ${iop_arg_OVERRIDES})
  _iop_filter_list(iop_arg_OVERRIDE_HEADERS "h" ${iop_arg_OVERRIDES})
  get_filename_component(IOP_BUILDER_JSIDL_DIR "${IOP_BUILDER_SCRIPT_DIR}/../jsidl" ABSOLUTE)
  if (NOT "${iop_arg_IDLS}" STREQUAL "")
    _iop_prepend_path(iop_arg_DEFAULT_IDLS "${IOP_BUILDER_JSIDL_DIR}" ${iop_arg_IDLS})
    message(STATUS "Parse JAUS JSIDLS: ${iop_arg_DEFAULT_IDLS}")
  endif()
  # to use external services we delete own services which are generated by JTS code generator
  if (NOT "${iop_arg_EXTERN_SERVICES}" STREQUAL "")
    _iop_prepend_path(iop_arg_EXTERN_INCLUDES "${IOP_COMPONENT_DIR}/include" ${iop_arg_EXTERN_SERVICES})
    _iop_prepend_path(iop_arg_EXTERN_SRCS "${IOP_COMPONENT_DIR}/src" ${iop_arg_EXTERN_SERVICES})
  endif()

  add_custom_command(
    OUTPUT "jaus.xml"
    COMMAND "${PYTHON_EXECUTABLE}" "${IOP_BUILDER_SCRIPT_DIR}/mss.py" "${CMAKE_CURRENT_BINARY_DIR}/jaus.xml" "${IOP_COMPONENT_NAME}" "${IOP_COMPONENT_ID}" ${iop_arg_DEFAULT_IDLS} ${iop_arg_OWN_IDLS}
    COMMAND ${CMAKE_COMMAND} -E remove_directory "${CMAKE_CURRENT_BINARY_DIR}/jaus/"
    COMMAND ${CMAKE_COMMAND} -E make_directory "${CATKIN_DEVEL_PREFIX}/${CATKIN_GLOBAL_INCLUDE_DESTINATION}"
    WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
    DEPENDS ${iop_arg_DEFAULT_IDLS} ${iop_arg_OWN_IDLS}
  )

  add_custom_command(
    OUTPUT "jaus.overrides"
    COMMAND "${PYTHON_EXECUTABLE}" "${IOP_BUILDER_SCRIPT_DIR}/cpy.py" "${IOP_COMPONENT_DIR}" ${iop_arg_OVERRIDE_HEADERS}
    COMMAND touch "${CMAKE_CURRENT_BINARY_DIR}/jaus.overrides"
    WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
    DEPENDS ${iop_arg_OVERRIDE_SOURCES} ${iop_arg_OVERRIDE_HEADERS} "jaus.xml"
  )

  add_custom_command(
    OUTPUT "jaus.headers"
    COMMAND "${Java_JAVA_EXECUTABLE}" ${CMAKE_JAVA_COMPILE_FLAGS} -classpath .:${jaustoolset_INCLUDE_JARS}:${DEVEL_LIB}/iop_codegenerator.jar:${jaustoolset_OUTPUT_DIR}/iop_codegenerator.jar org.jts.codegenerator.CodeGenerator -i "${CMAKE_CURRENT_BINARY_DIR}/jaus.xml" -o "${CMAKE_CURRENT_BINARY_DIR}/jaus" -n "${IOP_COMPONENT_NAME}"
    COMMAND rm -fr ${iop_arg_EXTERN_INCLUDES} ${iop_arg_EXTERN_SRCS}
    COMMAND "${PYTHON_EXECUTABLE}" "${IOP_BUILDER_SCRIPT_DIR}/chmerge.py" "${CMAKE_CURRENT_SOURCE_DIR}" "${IOP_COMPONENT_DIR}" ${iop_arg_OVERRIDE_HEADERS}
    COMMAND "${PYTHON_EXECUTABLE}" "${IOP_BUILDER_SCRIPT_DIR}/chmerge.py" "${CMAKE_CURRENT_SOURCE_DIR}" "${IOP_COMPONENT_DIR}" ${iop_arg_OVERRIDE_SOURCES}
    COMMAND touch "${CMAKE_CURRENT_BINARY_DIR}/jaus.headers"
    COMMAND find ${CATKIN_DEVEL_PREFIX}/${CATKIN_GLOBAL_INCLUDE_DESTINATION} -name "*.old" -type f -delete
    COMMAND cp -r -v -t ${CATKIN_DEVEL_PREFIX}/${CATKIN_GLOBAL_INCLUDE_DESTINATION} ${IOP_INSTALL_INCLUDE_DIRS} 2>/dev/null || :
    WORKING_DIRECTORY "${jaustoolset_WORKING_DIR}"
    DEPENDS ${iop_arg_OVERRIDE_HEADERS} "jaus.overrides"
  )

  add_custom_command(
    OUTPUT "jaus.cpp"
    COMMAND "${PYTHON_EXECUTABLE}" "${IOP_BUILDER_SCRIPT_DIR}/cpp.py" "${CMAKE_CURRENT_BINARY_DIR}/jaus.cpp" "${IOP_COMPONENT_DIR}" ${iop_arg_OVERRIDE_SOURCES}
    DEPENDS "jaus.headers"
    WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}"
  )

  set("${iop_arg_GENERATED_SOURCES}" "${CMAKE_CURRENT_BINARY_DIR}/jaus.cpp;${iop_arg_OVERRIDE_SOURCES}")
  if(CMAKE_COMPILER_IS_GNUCXX)
    set_source_files_properties(${${iop_arg_GENERATED_SOURCES}} APPEND PROPERTIES COMPILE_FLAGS "-Wno-unused-variable -Wno-write-strings -Wno-sign-compare -Wno-type-limits -Wno-extra")
  endif()
endmacro()
